<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Module1" script:language="StarBasic">REM  *****  Formatting of all Math formulas  *****
 
Option Explicit
 
Sub Swap(ByRef v1, ByRef v2)
  If (v1 &lt;&gt; v2) Then
    Dim v
    v = v1
    v1 = v2
    v2 = v
  End If
End Sub
 
&apos; See https://rosettacode.org/wiki/Sorting_algorithms/Quicksort#BASIC
Sub quicksort (ByRef arr, leftN As Long, rightN As Long)
  If (rightN &gt; leftN) Then
    Dim pivot As Long, leftNIdx As Long, rightNIdx As Long
    leftNIdx = leftN
    rightNIdx = rightN
    pivot = (leftN + rightN) / 2
    Dim pivotVal
    While (leftNIdx &lt;= pivot) And (rightNIdx &gt;= pivot)
      pivotVal = arr(pivot)
      Do While (leftNIdx &lt; pivot)
        If (arr(leftNIdx) &gt;= pivotVal) Then
          Exit Do
        End If
        leftNIdx = leftNIdx + 1
      Loop
      Do While (rightNIdx &gt; pivot)
        If (arr(rightNIdx) &lt;= pivotVal) Then
          Exit Do
        End If
        rightNIdx = rightNIdx - 1
      Loop
      Swap(arr(leftNIdx), arr(rightNIdx))
      If (leftNIdx = pivot) Then
        leftNIdx = leftNIdx + 1
        pivot = rightNIdx
      ElseIf (rightNIdx = pivot) Then
        rightNIdx = rightNIdx - 1
        pivot = leftNIdx
      Else
        leftNIdx = leftNIdx + 1
        rightNIdx = rightNIdx - 1
      End If
    Wend
    quicksort(arr, leftN, pivot - 1)
    quicksort(arr, pivot + 1, rightN)
  End If
End Sub
 
Function Unique(ByRef sortedArr)
  If (LBound(sortedArr) &lt; UBound(sortedArr)) Then
    Dim i As Long, j As Long
    j = LBound(sortedArr)
    Dim vLast
    vLast = sortedArr(j)
    For i = LBound(sortedArr)+1 to UBound(sortedArr)
      If (sortedArr(i) &lt;&gt; vLast) Then
        j = j + 1
        sortedArr(j) = sortedArr(i)
        vLast = sortedArr(i)
      End If
    Next i
    ReDim Preserve sortedArr(LBound(sortedArr) to j)
  End If
  Unique = sortedArr
End Function
 
&apos; See Andrew Pitonyak&apos;s OOME Third Edition, Listing 305 (p.325)
Sub FillFontsList(ByRef oListBox, ByRef oDoc)
  Dim oWindow As Object
  Dim oFonts() As Object
  Dim i As Long
 
  oWindow = oDoc.getCurrentController().getFrame().getContainerWindow()
  oFonts() = oWindow.getFontDescriptors()
  Dim sFonts(LBound(oFonts()) to UBound(oFonts())) As String
  For i = LBound(oFonts()) To UBound(oFonts())
    sFonts(i) = oFonts(i).Name
  Next
  quicksort(sFonts, LBound(sFonts()), UBound(sFonts())
  oListBox.AddItems(Unique(sFonts), 0)
 
  oListBox.selectItemPos(0, True)
End Sub
 
Sub DialogFormattingShow
  Dim oDoc
  oDoc = ThisComponent
  BasicLibraries.LoadLibrary(&quot;Tools&quot;)
  Dim oDialog As Object
  oDialog = LoadDialog(&quot;FAF&quot;, &quot;FaF&quot;)
  oDialog.Context = oDoc
  FillFontsList(oDialog.GetControl(&quot;ListTypeFonts&quot;), oDoc)
  If (IsSelectionEmpty(oDoc.CurrentSelection)) Then
    oDialog.GetControl(&quot;FormattingOiS&quot;).setEnable(False)
  End If
  oDialog.execute()
End Sub
 
Function GetObjectsFromDrawPage(ByRef oDrawPage, ByRef oSel)
  &apos; Create an array with 1 extra element to simplify things
  Dim vObjects(0 To oDrawPage.Count) As Object
  Dim i As Long
  Dim oObj As Object
  For i = 0 to oDrawPage.Count-1
    oObj=oDrawPage(i)
    If (IsInSelection(oObj, oSel)) Then
      vObjects(i) = oObj
    End If
  Next i
  GetObjectsFromDrawPage = vObjects
End Function
 
Function GetObjectsFromDrawPages(ByRef oDoc, ByRef oSel)
  Dim vObjects() As Object
  Dim oPage As Object
  Dim k As Long
  For k = 0 To oDoc.DrawPages.Count-1
    Dim vObj() As Object
    vObj = GetObjectsFromDrawPage(oDoc.DrawPages(k), oSel)
    Dim i As Long, j As Long
    j = UBound(vObjects)-LBound(vObj)+1
    ReDim Preserve vObjects(LBound(vObjects) To j+UBound(vObj))
    For i = LBound(vObj) To UBound(vObj)
      vObjects(i+j) = vObj(i)
    Next i
  Next k
  GetObjectsFromDrawPages = vObjects
End Function
 
Function GetObjectsFromDoc(ByRef oDoc, ByRef oSel, ByRef oViewCursor)
  Dim vObjects() As Object
  Dim i As Long
  If (IsSelectionEmpty(oSel)) Then
    oSel = Nothing
  ElseIf (oSel.supportsService(&quot;com.sun.star.text.TextRanges&quot;)) Then
    For i = 0 To oSel.getCount() - 1          REM Traverse Selections.
      vObjects = GetObjectsFromTextRange(oSel.getByIndex(i), vObjects)
    Next i
    GetObjectsFromDoc = vObjects
    Exit Function
  ElseIf (HasUnoInterfaces(oSel, &quot;com.sun.star.text.XTextTableCursor&quot;)) Then
    Dim oTab As Object
    oTab=oViewCursor.TextTable
    Dim rangeName$
    rangeName = oSel.getRangeName()
    Dim oCellRange As Object
    oCellRange = oTab.getCellRangeByName(rangeName)
    Dim j As Long
    Dim aData
    aData = oCellRange.Data
    For i = LBound(aData) To UBound(aData)
      For j = LBound(aData(i)) To UBound(aData(i))
        Dim oCell
        oCell = oCellRange.getCellByPosition(j, i)
        vObjects = GetObjectsFromTextRange(oCell, vObjects)
      Next j
    Next i
    GetObjectsFromDoc = vObjects
    Exit Function
  End If
  If (HasUnoInterfaces(oDoc, &quot;com.sun.star.drawing.XDrawPagesSupplier&quot;)) Then
    vObjects = GetObjectsFromDrawPages(oDoc, oSel)
  ElseIf (HasUnoInterfaces(oDoc, &quot;com.sun.star.drawing.XDrawPageSupplier&quot;)) Then
    vObjects = GetObjectsFromDrawPage(oDoc.DrawPage, oSel)
  End If
  GetObjectsFromDoc = vObjects
End Function
 
Sub ResetProgress(ByRef oDialog, nMaxVal As Long)
  With oDialog.GetControl(&quot;ProgressBar1&quot;)
    .setRange(0, nMaxVal)
    .setValue(0)
  End With
End Sub
 
Sub SetProgress(ByRef oDialog, nVal As Long)
  With oDialog.GetControl(&quot;ProgressBar1&quot;)
    .setValue(nVal)
  End With
End Sub
 
Sub StepProgress(ByRef oDialog, nStep As Long)
  With oDialog.GetControl(&quot;ProgressBar1&quot;)
    .setValue(.getValue() + nStep)
  End With
End Sub
 
Sub OnCheckboxStatusChanged(ByRef aEvent)
  Dim oDialog As Object
  oDialog = aEvent.Source.Context
  Dim bUseFontSize As Boolean, bUseFontName As Boolean
  bUseFontSize = oDialog.GetControl(&quot;CheckBox1&quot;).State
  bUseFontName = oDialog.GetControl(&quot;CheckBox2&quot;).State
 
  oDialog.GetControl(&quot;NumericFieldForFontSize&quot;).Enable = bUseFontSize
  oDialog.GetControl(&quot;ListTypeFonts&quot;).Enable = bUseFontName
 
  oDialog.GetControl(&quot;Formatting&quot;).Enable = bUseFontSize Or bUseFontName
  oDialog.GetControl(&quot;FormattingOiS&quot;).Enable = Not (IsSelectionEmpty(oDialog.Context.CurrentSelection)) And (bUseFontSize Or bUseFontName)
End Sub
 
Sub OnFormattingClick(ByRef aMouseEvent)
  Dim oDialog As Object
  oDialog = aMouseEvent.Source.Context
  ResetProgress(oDialog, 0)
  Dim oDoc As Object
  oDoc = oDialog.Context
 
  Formatting(oDialog, GetObjectsFromDoc(oDoc, Nothing, Nothing))
End Sub
 
Sub OnSelFormattingClick(ByRef aMouseEvent)
  Dim oDialog As Object
  oDialog = aMouseEvent.Source.Context
  ResetProgress(oDialog, 0)
  Dim oDoc As Object
  oDoc = oDialog.Context
  Dim oSel As Object
  oSel = oDoc.CurrentSelection
  Dim oViewCursor
  oViewCursor = ThisComponent.CurrentController.getViewCursor()
 
  Formatting(oDialog, GetObjectsFromDoc(oDoc, oSel, oViewCursor))
End Sub
 
Function IsSelectionEmpty(ByRef oSel) As Boolean
  IsSelectionEmpty = False
  If (IsNull(oSel)) Then
    IsSelectionEmpty = True
  ElseIf (HasUnoInterfaces(oSel, &quot;com.sun.star.drawing.XShape&quot;)) Then
    &apos; Selected single object - selection isn&apos;t empty; do nothing
  ElseIf (HasUnoInterfaces(oSel, &quot;com.sun.star.sheet.XSheetCellRange&quot;)) Then
    &apos; Something is selected anyway
  ElseIf (HasUnoInterfaces(oSel, &quot;com.sun.star.text.XTextTableCursor&quot;)) Then
    &apos; Some cells in table are selected - assume non-empty selection
  ElseIf (oSel.Count = 0) Then
    IsSelectionEmpty = True
  ElseIf ((oSel.Count = 1) And oSel.supportsService(&quot;com.sun.star.text.TextRanges&quot;)) Then
    With oSel(0)
      If (.text.compareRegionStarts(.getStart, .getEnd)=0) Then
        IsSelectionEmpty = True
      End If
    End With
  End If
End Function
 
&apos; Checks if Range1 is inside Range2
Function IsTextRangeInsideRange(ByRef oRange1, ByRef oRange2) As Boolean
  IsTextRangeInsideRange = (oRange2.text.compareRegionStarts(oRange1, oRange2)&lt;=0)_
                       And (oRange2.text.compareRegionEnds(oRange1, oRange2)&gt;=0)
End Function
 
Function IsCorrectObjectType(ByRef Obj) As Boolean
  IsCorrectObjectType = Obj.supportsService(&quot;com.sun.star.drawing.OLE2Shape&quot;)_
                     Or Obj.supportsService(&quot;com.sun.star.text.TextEmbeddedObject&quot;)
End Function
 
Function GetObjectsFromTextRange(ByRef oSel, ByRef vObjects() As Object)
  Dim oEnum As Object
  oEnum = oSel.createEnumeration()
  Do While oEnum.hasMoreElements()            REM Traverse Paragraphs.
    Dim oParagraphOrTable As Object
    oParagraphOrTable = oEnum.nextElement()
    If (HasUnoInterfaces(oParagraphOrTable, &quot;com.sun.star.text.XTextTable&quot;)) Then
      With oParagraphOrTable
        Dim j As Long
        For j = LBound(.CellNames) To UBound(.CellNames)
          vObjects = GetObjectsFromTextRange(.getCellByName(.CellNames(j)), vObjects)
        Next j
      End With
    Else
      Dim oEnum2 As Object
      oEnum2 = oParagraphOrTable.createEnumeration()
      Do While oEnum2.hasMoreElements()       REM Traverse TextPortions.
        Dim oPortion As Object
        oPortion = oEnum2.nextElement()
        Dim oEnum3 As Object
        oEnum3 = oPortion.createContentEnumeration( &quot;com.sun.star.text.TextContent&quot; )
        Do While oEnum3.hasMoreElements()   REM Traverse TextContents.
          Dim oContent As Object
          oContent = oEnum3.nextElement()
          If (IsCorrectObjectType(oContent)) Then
            ReDim Preserve vObjects(LBound(vObjects) To 1+UBound(vObjects))
            vObjects(UBound(vObjects)) = oContent
          End If
        Loop
      Loop
    End If
  Loop
  GetObjectsFromTextRange = vObjects
End Function
 
Function IsCellRangeInsideRange(ByRef oRange1, ByRef oRange2) As Boolean
  IsCellRangeInsideRange = _
            (oRange1.RangeAddress.Sheet        = oRange2.RangeAddress.Sheet      )_
        And (oRange1.RangeAddress.StartColumn &gt;= oRange2.RangeAddress.StartColumn)_
        And (oRange1.RangeAddress.EndColumn   &lt;= oRange2.RangeAddress.EndColumn  )_
        And (oRange1.RangeAddress.StartRow    &gt;= oRange2.RangeAddress.StartRow   )_
        And (oRange1.RangeAddress.EndRow      &lt;= oRange2.RangeAddress.EndRow     )
End Function
 
Function IsInSelection(ByRef oObj, ByRef oSel) As Boolean
  Dim i As Long
  If (IsNull(oSel)) Then
    IsInSelection = True
  ElseIf (HasUnoInterfaces(oSel, &quot;com.sun.star.drawing.XShape&quot;)) Then
    IsInSelection = EqualUnoObjects(oObj, oSel)
  ElseIf (HasUnoInterfaces(oSel, &quot;com.sun.star.drawing.XShapes&quot;)) Then
    IsInSelection = False
    For i = 0 To oSel.Count - 1
      If (EqualUnoObjects(oObj, oSel(i))) Then
        IsInSelection = True
        Exit For
      End If
    Next i
  ElseIf (HasUnoInterfaces(oSel, &quot;com.sun.star.sheet.XSheetCellRange&quot;)) Then
    IsCellRangeInsideRange(oObj.Anchor, oSel)
  ElseIf (HasUnoInterfaces(oSel, &quot;com.sun.star.sheet.XSheetCellRangeContainer&quot;)) Then
    IsInSelection = False
    For i = 0 To oSel.Count - 1
      If (IsCellRangeInsideRange(oObj.Anchor, oSel(i))) Then
        IsInSelection = True
        Exit For
      End If
    Next i
  Else
    IsInSelection = False
    For i = 0 To oSel.Count - 1
      If (IsTextRangeInsideRange(oObj.Anchor, oSel(i))) Then
        IsInSelection = True
        Exit For
      End If
    Next i
  End If
End Function
 
Sub Formatting(ByRef oDialog, ByRef vObjects)
  ResetProgress(oDialog, UBound(vObjects)-LBound(vObjects)+1)
 
  Dim bUseFontSize As Boolean, bUseFontName As Boolean
  bUseFontSize = oDialog.GetControl(&quot;CheckBox1&quot;).State
  bUseFontName = oDialog.GetControl(&quot;CheckBox2&quot;).State
 
  Dim oDoc As Object
  oDoc = oDialog.Context
  oDoc.lockControllers()
  On Local Error GoTo ErrHandler
  Dim nFontSize As Long
  If (bUseFontSize) Then
    With oDialog.GetControl(&quot;NumericFieldForFontSize&quot;)
      nFontSize = .Text
      If (nFontSize &lt; 4) Then
        nFontSize = 4
        .Text = &quot;4&quot;
      End If
    End With
  End If
  Dim sFontName As String
  If (bUseFontName) Then
    With oDialog.GetControl(&quot;ListTypeFonts&quot;)
      sFontName = Trim(.SelectedItem)
    End With
  End If
  Dim Obj As Object
  Dim i As Long
  Dim bWasBold As Boolean, bWasItalic As Boolean
  For i=LBound(vObjects) to UBound(vObjects)
    Obj = vObjects(i)
    If (Not IsNull(Obj)) Then
      If (IsCorrectObjectType(Obj)) Then
        &apos; Здесь можно менять внешние параметры формулы, например, отступ от текста
        Dim ObjModel As Object
        ObjModel = Obj.Model
        If (Not IsNull(ObjModel)) Then
          If ObjModel.supportsService(&quot;com.sun.star.formula.FormulaProperties&quot;) then
            If (Len(sFontName)&gt;0) Then
              bWasBold = ObjModel.FontFunctionsIsBold
              bWasItalic = ObjModel.FontFunctionsIsItalic
              ObjModel.FontNameFunctions=sFontName
              ObjModel.FontFunctionsIsBold = bWasBold
              ObjModel.FontFunctionsIsItalic = bWasItalic
 
              bWasBold = ObjModel.FontNumbersIsBold
              bWasItalic = ObjModel.FontNumbersIsItalic
              ObjModel.FontNameNumbers=sFontName
              ObjModel.FontNumbersIsBold = bWasBold
              ObjModel.FontNumbersIsItalic = bWasItalic
 
              bWasBold = ObjModel.FontTextIsBold
              bWasItalic = ObjModel.FontTextIsItalic
              ObjModel.FontNameText=sFontName
              ObjModel.FontTextIsBold = bWasBold
              ObjModel.FontTextIsItalic = bWasItalic
 
              bWasBold = ObjModel.FontVariablesIsBold
              bWasItalic = ObjModel.FontVariablesIsItalic
              ObjModel.FontNameVariables=sFontName
              ObjModel.FontVariablesIsBold = bWasBold
              ObjModel.FontVariablesIsItalic = bWasItalic
            End If
            If (bUseFontSize) Then
              ObjModel.BaseFontHeight = nFontSize
            End If
            &apos;ObjModel.FontFixedIsBold = False
            &apos;ObjModel.FontFixedIsItalic = False
            &apos;ObjModel.FontFunctionsIsBold = False
            &apos;ObjModel.FontFunctionsIsItalic = False
          End If
        End If
        If (HasUnoInterfaces(Obj, &quot;com.sun.star.document.XEmbeddedObjectSupplier2&quot;)) Then
          Obj.ExtendedControlOverEmbeddedObject.Update()
        End If
      End If
    End If
    StepProgress(oDialog, 1)
  Next i
ErrHandler:
  oDoc.unlockControllers()
  If (Err &lt;&gt; 0) Then
    MsgBox &quot;          Error!              &quot;
  Else
    MsgBox &quot;          Done!               &quot;
  End If
End Sub
</script:module>