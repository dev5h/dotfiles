<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="DrawImpressFontViaStyle" script:language="StarBasic">REM  *****  BASIC  *****
option explicit

sub main
	AdaptFormulaSizeNameToGraphicStyle	
end sub

&apos; The macro AdaptFormulaSizeToGraphicStyle changes the formula font size and the font weight.
&apos; for the whole formula and the font name of formula text for selected formulas. The font
&apos; name of variables and symbols is not changed. The new fontvalues are taken from the graphic
&apos; style, which is assigned to the formula.

&apos; Copyright (C) 2011; Regina Henschel;
&apos; Ask me for licenses; regina@openoffice.org

Rem === How To Use ===

&apos; To change the font properties of a set of formulas first set the font size, font name and
&apos; type face in the graphic style, which is assigned to the formulas. Then select the formulas
&apos; and then run the macro AdaptFormulaSizeToGraphicStyle. The program effects formulas in nested
&apos; groups as well. It might be useful, to define a dedicated style for your formulas.
&apos; To change _all_ formulas on several slides in Impress, select the slides in the
&apos; Slide-Sorter and then run the macro AdaptFormulaSizeToGraphicStyle.

&apos; Um die Schrifteigenschaften in Formeln zu ändern, ändern Sie zunächst die Schriftart, den
&apos; Schriftschnitt und die Schriftgröße in der Grafik-Formatvorlage, die den Formeln zugewiesen
&apos; ist. Wählen Sie dann die Formeln aus und rufen anschließend das Makro
&apos; AdaptFormulaSizeToGraphicStyle auf. Die Formeln werden auch innerhalb von geschachtelten
&apos; Gruppen geändert. Es mag nützlich sein, eine spezielle Formatvorlage für Formeln zu
&apos; definieren.
&apos; Um in Impress _alle_ Formeln auf mehreren Folien zu ändern, wählen Sie die Folien in der
&apos; Foliensortierung aus und rufen dann das Makro AdaptFormulaSizeToGraphicStyle auf.

sub AdaptFormulaSizeNameToGraphicStyle
dim oCurrentController as variant: oCurrentController = ThisComponent.getCurrentController()
dim oDoc as variant: oDoc=ThisComponent
if not(oCurrentController.supportsService(&quot;com.sun.star.drawing.DrawingDocumentDrawView&quot;)) then
	msgbox(&quot;Only for Draw and Impress documents.&quot;)
	exit sub
end if
dim oShapeCollection as variant: oShapeCollection = oCurrentController.Selection
if isEmpty(oShapeCollection) then
	msgbox(&quot;Nothing selected.&quot;)
	exit sub
end if
dim nVarType as integer: nVarType = VarType(oShapeCollection)
&apos;9 object; Something is selected in Normal view
&apos;8201=8192+9 array of object; Slides are selected in slide sorter. 
if nVarType=9 then
	WorkOnNormalView(oShapeCollection)
else if nVarType=8201 then
		WorkOnSlideSorter(oShapeCollection)
	else
		exit sub
	end if
end if
oDoc.Modified = true
end sub

sub WorkOnNormalView(oShapeCollection as variant)
if not(oShapeCollection.supportsService(&quot;com.sun.star.drawing.ShapeCollection&quot;)) then
	exit sub
end if
dim nShapeIndex as long
dim nEndShapeIndex as long: nEndShapeIndex = oShapeCollection.Count-1
dim oShape as variant
for nShapeIndex=0 to nEndShapeIndex
	oShape = oShapeCollection(nShapeIndex)
	AdaptCharHeightAndTextFontDeep1(oShape) &apos;one parameter
next nShapeIndex
end sub

sub WorkOnSlideSorter(oPagesCollection as variant)
dim nPageIndex as long
dim nShapeIndex as long
dim nEndShapeIndex as long
dim oSelectedPage as variant
dim oShape as variant
&apos; Iterate over all selected pages, then over all shapes.
for nPageIndex = LBound(oPagesCollection) to UBound(oPagesCollection)
	oSelectedPage = oPagesCollection(nPageIndex)
	nEndShapeIndex = oSelectedPage.Count - 1
	for nShapeIndex=0 to nEndShapeIndex
		oShape = oSelectedPage(nShapeIndex)
		AdaptCharHeightAndTextFontDeep1(oShape)
	next nShapeIndex	
next nPageIndex
end sub

sub AdaptCharHeightAndTextFontDeep1(oShapeInOut as variant)
&apos;recursive solution
dim sShapeType: sShapeType = oShapeInOut.ShapeType
dim EnumItalic: EnumItalic = com.sun.star.awt.FontSlant.ITALIC
dim EnumOblique: EnumOblique = com.sun.star.awt.FontSlant.OBLIQUE

if sShapeType = &quot;com.sun.star.drawing.GroupShape&quot; then
	dim nCount as long: nCount = oShapeInOut.Count
	dim nIndex as long
	dim nEndIndex as long: nEndIndex = nCount -1
	for nIndex = 0 to nEndindex
		AdaptCharHeightAndTextFontDeep1(oShapeInOut.getByIndex(nIndex))
	next nIndex
else
	if oShapeInOut.supportsService(&quot;com.sun.star.drawing.OLE2Shape&quot;) then
		if oShapeInOut.CLSID = &quot;078B7ABA-54FC-457F-8551-6147e776a997&quot; then
			&apos;Math-object
			dim oStyle as variant: oStyle = oShapeInOut.Style
			dim oModelFormula as variant: oModelFormula = oShapeInOut.Model
			dim fCharHeight as single: fCharHeight = oStyle.CharHeight
			dim sCharFontName as String: sCharFontName = oStyle.CharFontName
			dim bIsBold as boolean: bIsBold = (oStyle.CharWeight&gt;=150)
			dim bIsItalic as boolean: bIsItalic =  (oStyle.CharPosture = EnumItalic) OR (oStyle.CharPosture = EnumOblique)	
			oModelFormula.FontNameText = sCharFontName			
			oModelFormula.FontTextIsBold = bIsBold
			oModelFormula.FontVariablesIsBold = bIsBold
			oModelFormula.FontFunctionsIsBold = bIsBold
			oModelFormula.FontNumbersIsBold = bIsBold
			oModelFormula.FontTextIsItalic = bIsItalic
			oModelFormula.BaseFontHeight = Int(fCharHeight)
		endif
	endif
endif
end sub



</script:module>