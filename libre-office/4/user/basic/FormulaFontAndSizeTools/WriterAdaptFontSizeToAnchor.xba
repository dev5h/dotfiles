<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="WriterAdaptFontSizeToAnchor" script:language="StarBasic">REM  *****  BASIC  *****

Sub Main
	 AdaptFormelFontSizeToTextEnvironment
End Sub

REM ===== For Textdocuments ======

&apos;Adapt the formula font size to the font size of the anchor object

&apos;Copyright (C) 2011; Regina Henschel
&apos;Ask me for licenses; regina@openoffice.org

&apos; The macro AdaptFormelFontSizeToTextEnvironment changes Math formulas in the document in the
&apos; way, that the base font size is set to the font size of the anchor object. For formulas
&apos; anchored as character the information left from the formula is used as reference, as it is
&apos; shown in the formatting toolbar.
&apos; Formulas anchored to page or frame are not effected because a page or frame hasn&apos;t 
&apos; got a font size.

&apos; Das Makro AdaptFormelFontSizeToTextEnvironment ändert die Schriftgröße der Math Formelobjekte
&apos; in der Weise, dass die Schriftgröße des Objekts übernommen wird, an dem die Formel verankert
&apos; ist. Bei Formeln die als Zeichen verankert sind, wird die Information benutzt, die links der
&apos; Formel steht, so wie sie in der Format-Symbolleiste angezeigt wird.
&apos; Formeln, die an der Seite oder am Rahmen verankert sind, werden nicht
&apos; verändert, weil eine Seite bzw. Rahmen keine Eigenschaft &quot;Schriftgröße&quot; besitzt. 


sub AdaptFormelFontSizeToTextEnvironment
dim oCurrentController as variant: oCurrentController = ThisComponent.getCurrentController()
dim oDoc as variant: oDoc=ThisComponent
if not(oCurrentController.supportsService(&quot;com.sun.star.text.TextDocumentView&quot;)) then
	msgbox(&quot;Macro works only in text documents.&quot;)
	exit sub
end if
dim oModelTextDocument as variant: oModelTextDocument = oCurrentController.Model
dim oEmbeddedObjects as variant: oEmbeddedObjects = oModelTextDocument.EmbeddedObjects
dim nIndex as long
dim nEndIndex as long: nEndIndex = oEmbeddedObjects.Count-1
dim oEmbeddedObject as variant: rem like green handle status
dim oModel as variant: rem like edit status
dim oAnchor as variant: rem for access to the character properties
dim fCharHeight as single
dim oXCOEO as variant: rem oExtendedControlOverEmbeddedObject
for nIndex=0 to nEndIndex
	oEmbeddedObject = oEmbeddedObjects.getByIndex(nIndex)
	oModel = oEmbeddedObject.Model: rem might be empty; css.comp.math.FormulaDocument
	if Not(isEmpty(oModel)) then
		if oModel.supportsService(&quot;com.sun.star.formula.FormulaProperties&quot;) then
			rem It is a formula object.
			oAnchor = oEmbeddedObject.Anchor: rem Is NULL for page anchor
			if Not(isNull(oAnchor)) then
				if oAnchor.supportsService(&quot;com.sun.star.style.CharacterProperties&quot;) then
					fCharHeight = oAnchor.CharHeight
					rem round down for not to break line height
					oModel.BaseFontHeight = Int(fCharHeight)
					oXCOEO = oEmbeddedObject.ExtendedControlOverEmbeddedObject
					oXCOEO.update()
				end if
			end if
		end if	
	end if
next nIndex
end sub

</script:module>